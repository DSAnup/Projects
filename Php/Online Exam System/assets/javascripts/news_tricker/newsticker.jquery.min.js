(function (a) {
    if (a.fn.on === undefined) {
        a.fn.on = function (c, b) {
            this.bind(c, b)
        }
    }
    if (a.fn.off === undefined) {
        a.fn.off = function (c, b) {
            return this.unbind(c, b)
        }
    }
    a.fn.newsticker = function (c) {
        var b = this;
        b.methods = a.fn.newsticker.methods;
        b.api = a.fn.newsticker.api;
        b.delegate = a.fn.newsticker.delegate;
        b.settings = a.extend({}, a.fn.newsticker.defaults, c);
        return this.each(function () {
            b.api("init", a(this))
        })
    };
    a.fn.newsticker.defaults = {
        style: "scroll",
        showControls: true,
        tickerTitle: "",
        feedItems: 10,
        feeds: "",
        feedFormat: "%title% posted by %author%, %timeago%",
        twitter: "",
        twitterFormat: "",
        twitterCount: "",
        facebook: "",
        facebookFormat: '%excerpt%... Posted on <a href="%link%">Facebook</a> %timeago%',
        facebookCount: "",
        lastfm: "",
        lastfmFormat: '<a href="%link%">%title%</a> listened to %timeago%',
        lastfmCount: "",
        excerptLength: 100,
        sortBy: "timestamp",
        reverseOrder: false,
        autoStart: true,
        timeAgoFormat: function (b) {
            return a.fn.newsticker.methods.getTimeAgo(b)
        },
        dateFormat: function (b) {
            return a.fn.newsticker.methods.getFormattedDate(b)
        }
    };
    a.fn.newsticker.delegate = function (d) {
        var c = this.style[d],
            b = Array.prototype.slice.call(arguments, 1);
        if (typeof (c) === "function") {
            return c.apply(this, b)
        }
        return false
    };
    a.fn.newsticker.api = function (d) {
        var c = this.methods[d],
            b = Array.prototype.slice.call(arguments, 1);
        if (typeof (c) === "function") {
            return c.apply(this, b)
        }
        return false
    };
    a.fn.newsticker.methods = {
        getId: function () {
            var b = new Date;
            return b.getTime()
        },
        init: function (b) {
            if (typeof (a.fn.newsticker.styles[this.settings.style]) === "object") {
                this.style = a.fn.newsticker.styles[this.settings.style]
            } else {
                console.log("ERROR: Invalid display style.");
                return
            }
            this.settings = a.extend(this.delegate("settings"), this.settings);
            this.delegate("init");
            this.dom = {};
            this.dom.list = b;
            this.api("getFeeds");
            if (this.feeds.length === 0 && this.settings.twitter.length === 0 && this.settings.facebook.length === 0) {
                this.dom.items = this.dom.list.children("li");
                this.api("startup")
            }
        },
        startup: function () {
            var c = this,
                g = this.dom,
                d = this.settings,
                f = g.list;
            f.wrap('<div class="newsticker_wrapper newsticker_style_' + d.style + '" id="newsticker_' + this.api("getId") + '" style="position: relative; z-index: 150; overflow: hidden; "></div>');
            if (d.tickerTitle.length > 0) {
                a('<div class="newsticker_title"><h4>' + d.tickerTitle + "</h4></div>").insertBefore(f)
            }
            if (d.showControls === true) {
                var e = d.autoStart === false ? "resume" : "pause",
                    b;
                a('<ul class="newsticker_controls">                    <li class="previous"></li>                    <li class="' + e + '"></li>                    <li class="next"></li>                  </ul>').insertAfter(f);
                b = f.next(".newsticker_controls");
                b.children(".previous").on("click", function () {
                    c.delegate("previous")
                });
                b.children(".pause").on("click", function () {
                    c.delegate("pause")
                });
                b.children(".resume").on("click", function () {
                    c.delegate("resume")
                });
                b.children(".next").on("click", function () {
                    c.delegate("next")
                })
            }
            if (d.pauseOnHover === true) {
                g.items.on("mouseover", function () {
                    c.delegate("pause")
                }).on("mouseout", function () {
                    c.delegate("resume")
                })
            }
            g.wrapper = f.parent();
            g.title = g.wrapper.children(".newsticker_title");
            g.controls = b === undefined ? g.wrapper.children(".newsticker_controls") : b;
            a(window).resize(function () {
                c.api("resize")
            });
            this.delegate("manipulateDom");
            this.delegate("itemLoop");
            this.delegate("start")
        },
        getFeeds: function () {
            var l = this,
                f = l.settings,
                m = f.feedItems,
                h, b;
            l.feeds = [];
            if (f.feeds.length > 0) {
                var c = typeof (f.feeds) === "string" ? [f.feeds] : f.feeds;
                for (var g = 0, k = c.length; g < k; g += 1) {
                    var j = c[g];
                    b = typeof (j) === "string" ? j : j.url;
                    h = j.hasOwnProperty("count") ? j.count : m;
                    l.feeds.push({
                        type: "feed",
                        url: document.location.protocol + "//ajax.googleapis.com/ajax/services/feed/load?v=1.0&num=" + parseInt(h) + "&callback=?&q=" + encodeURIComponent(b),
                        count: h
                    })
                }
            }
            if (f.twitter.length > 0) {
                h = f.twitterCount > 0 ? f.twitterCount : m;
                l.feeds.push({
                    type: "twitter",
                    url: "http://api.twitter.com/1/statuses/user_timeline.json?screen_name=" + encodeURIComponent(f.twitter) + "&callback=?&count=" + parseInt(h),
                    count: h
                })
            }
            if (f.lastfm.length > 0) {
                h = f.lastfmCount > 0 ? f.lastfmCount : m;
                b = "http://ws.audioscrobbler.com/1.0/user/" + f.lastfm + "/recenttracks.rss";
                l.feeds.push({
                    type: "lastfm",
                    url: document.location.protocol + "//ajax.googleapis.com/ajax/services/feed/load?v=1.0&num=" + parseInt(h) + "&callback=?&q=" + encodeURIComponent(b),
                    count: h
                })
            }
            if (f.facebook.length > 0) {
                var e, d = new Date();
                a.ajax({
                    url: document.location.protocol + "//graph.facebook.com/" + f.facebook,
                    dataType: "jsonp",
                    success: function (i) {
                        e = i
                    },
                    error: function (o, i, n) {
                        console.log("An error occurred while trying to fetch this profile from Facebook");
                        e = "error"
                    },
                    complete: function () {
                        if (e !== "error") {
                            l.api("completeFacebookRequest", e)
                        }
                    }
                })
            } else {
                l.api("getFeedItems")
            }
        },
        completeFacebookRequest: function (e) {
            var c = this.settings,
                d = c.facebookCount > 0 ? c.facebookCount : c.feedItems,
                b = "https://www.facebook.com/feeds/page.php?id=" + e.id + "&format=rss20";
            this.feeds.push({
                type: "facebook",
                url: document.location.protocol + "//ajax.googleapis.com/ajax/services/feed/load?v=1.0&num=" + parseInt(d) + "&callback=?&q=" + encodeURIComponent(b),
                count: d,
                data: e
            });
            this.api("getFeedItems")
        },
        addItems: function (e, d, g) {
            var c = this.api("getItemsFromResponse", d, g),
                b = c.length,
                f = 0;
            for (f; f < b; f += 1) {
                var h = c[f];
                h.timestamp = this.api("getTimestamp", h, g);
                e.push(h)
            }
            return e
        },
        getItemsFromResponse: function (b, c) {
            switch (c) {
            case "twitter":
                return b;
                break;
            default:
                return b.responseData.feed.entries;
                break
            }
        },
        getTimestamp: function (c, b) {
            switch (b) {
            case "twitter":
                return new Date(c.created_at);
                break;
            default:
                return new Date(c.publishedDate);
                break
            }
        },
        getFeedItems: function () {
            var f = this,
                e = [],
                c = this.feeds,
                d = 0;
            for (var g = 0, b = c.length; g < b; g += 1) {
                var j = c[g],
                    h = j.type;
                a.ajax({
                    url: j.url,
                    dataType: "json",
                    success: function (i) {
                        if (h === "feed" && i.responseStatus !== 200) {
                            console.log("Unable to load feed");
                            return
                        }
                        f.api("addItems", e, i, h)
                    },
                    error: function (l, i, k) {
                        console.log("An error occurred while trying to fetch feed from " + j.url + ". Status: " + i)
                    },
                    complete: function () {
                        d += 1;
                        if (d === b) {
                            f.api("completeFeedItemsRequest", e, h)
                        }
                    }
                })
            }
        },
        completeFeedItemsRequest: function (g, h) {
            var c, b = this.settings,
                k = g.length > b.feedItems ? b.feedItems : g.length,
                d, f = this.dom.list,
                j = b.sortBy,
                e = b.reverseOrder;
            if (j === "random") {
                g = this.api("randomize", g)
            } else {
                g.sort(this.api("sortBy", j, e))
            }
            for (c = 0; c < k; c += 1) {
                d = this.api("displayFeedItem", g[c], h);
                f.append(d)
            }
            this.dom.items = f.children("li");
            this.api("startup")
        },
        sortBy: function (d, b) {
            var c = function (e) {
                return e[d]
            };
            return function (g, f) {
                var e = c(g),
                    h = c(f);
                return ((e < h) ? -1 : (e > h) ? +1 : 0) * [-1, 1][+ !! b]
            }
        },
        randomize: function (e) {
            var b, d, c = e.length;
            if (c) {
                while (--c) {
                    d = Math.floor(Math.random() * (c + 1));
                    b = e[d];
                    e[d] = e[c];
                    e[c] = b
                }
            }
            return e
        },
        getFormat: function (c) {
            var b = this.settings;
            switch (c) {
            case "facebook":
                return b.facebookFormat.length > 0 ? b.facebookFormat : b.feedFormat;
                break;
            case "twitter":
                return b.twitterFormat.length > 0 ? b.twitterFormat : b.feedFormat;
                break;
            case "lastfm":
                return b.lastfmFormat.length > 0 ? b.lastfmFormat : b.feedFormat;
                break;
            default:
                return b.feedFormat;
                break
            }
        },
        displayFeedItem: function (g, f) {
            var h = this.api("getFormat", f),
                d = ["author", "excerpt", "link", "item_link", "title", "timeago", "date"],
                e, c;
            for (var b = 0; b < d.length; b += 1) {
                c = d[b];
                if (c === "timeago") {
                    e = this.settings.timeAgoFormat(g.timestamp)
                } else {
                    if (c === "date") {
                        e = this.settings.dateFormat.apply(this, [g.timestamp])
                    } else {
                        e = this.api("getReplacement", g, c, f)
                    }
                }
                switch (c) {
                case "author":
                    h = h.replace(/\%author\%/g, e);
                    break;
                case "excerpt":
                    h = h.replace(/\%excerpt\%/g, e);
                    break;
                case "link":
                    h = h.replace(/\%link\%/g, e);
                    break;
                case "item_link":
                    h = h.replace(/\%item_link\%/g, e);
                    break;
                case "title":
                    h = h.replace(/\%title\%/g, e);
                    break;
                case "timeago":
                    h = h.replace(/\%timeago\%/g, e);
                    break;
                case "date":
                    h = h.replace(/\%date\%/g, e);
                    break
                }
            }
            return "<li>" + h + "</li>"
        },
        getReplacement: function (e, c, d) {
            switch (c) {
            case "author":
                switch (d) {
                case "twitter":
                    return e.user.name;
                    break;
                default:
                    return e.author;
                    break
                }
                break;
            case "excerpt":
                switch (d) {
                case "twitter":
                    return e.text.length > this.settings.excerptLength ? e.text.slice(0, this.settings.excerptLength) : e.text;
                    break;
                case "facebook":
                    var b = a(e.content).text();
                    if (b === "") {
                        return e.contentSnippet.length > this.settings.excerptLength ? e.contentSnippet.slice(0, this.settings.excerptLength) : e.contentSnippet
                    } else {
                        return b
                    }
                    break;
                case "lastfm":
                    return e.title;
                    break;
                default:
                    return e.contentSnippet.length > this.settings.excerptLength ? e.contentSnippet.slice(0, this.settings.excerptLength) : e.contentSnippet;
                    break
                }
                break;
            case "link":
                switch (d) {
                case "twitter":
                    return "https://twitter.com/#!/" + e.user.name;
                    break;
                case "facebook":
                    return "http://facebook.com/" + this.settings.facebook;
                    break;
                default:
                    return e.link;
                    break
                }
                break;
            case "item_link":
                switch (d) {
                case "twitter":
                    return "https://twitter.com/#!/" + e.user.name + "/statuses/" + e.id_str;
                    break;
                case "lastfm":
                    return e.content;
                    break;
                default:
                    return e.link;
                    break
                }
                break;
            case "title":
                switch (d) {
                case "twitter":
                    return "";
                    break;
                default:
                    return e.title;
                    break
                }
                break
            }
        },
        getTimeAgo: function (g) {
            var f = new Date(),
                c = f.getTime() - g.getTime(),
                e = 86400000,
                i = 60000,
                b = 3600000,
                d, h;
            if (c < b) {
                d = Math.ceil(c / i);
                h = d > 1 ? d + " minutes ago" : d + " minute ago"
            } else {
                if (c < e) {
                    d = Math.ceil(c / b);
                    h = d > 1 ? d + " hours ago" : d + " hour ago"
                } else {
                    d = Math.ceil(c / e);
                    h = d > 1 ? d + " days ago" : d + " day ago"
                }
            }
            return h
        },
        getFormattedDate: function (c) {
            var c = new Date(c),
                b = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
            return c.getDate() + " " + b[c.getMonth()]
        },
        getListWidth: function () {
            if (this.settings.showControls) {
                return this.dom.controls.position().left - this.dom.title.outerWidth(true)
            } else {
                return this.dom.wrapper.width() - this.dom.title.outerWidth(true)
            }
        },
        pause: function () {
            if (this.settings.showControls === true) {
                var b = this;
                this.dom.controls.children(".pause").removeClass("pause").addClass("resume").off("click", function () {
                    b.delegate("pause")
                }).on("click", function () {
                    b.delegate("resume")
                })
            }
        },
        resume: function () {
            if (this.settings.showControls === true) {
                var b = this;
                this.dom.controls.children(".resume").removeClass("resume").addClass("pause").off("click", function () {
                    b.delegate("resume")
                }).on("click", function () {
                    b.delegate("pause")
                })
            }
        },
        resize: function () {
            if (this.delegate("resize") === false) {
                this.dom.list.width(this.api("getListWidth"))
            }
        }
    };
    a.fn.newsticker.styles = {
        fade: {
            settings: function () {
                return {
                    fadeOutSpeed: "slow",
                    fadeInSpeed: "slow",
                    transitionSpeed: 4000,
                    pauseOnHover: true
                }
            },
            manipulateItem: function (d, c) {
                var b = this;
                d.css({
                    position: "absolute",
                    left: 0,
                    top: 0
                });
                if (c) {
                    d.addClass("display")
                } else {
                    d.hide()
                }
            },
            manipulateDom: function () {
                this.dom.wrapper.css({
                    width: "100%"
                });
                this.dom.title.css({
                    "float": "left",
                    margin: 0
                });
                this.dom.list.css({
                    "float": "left",
                    width: this.api("getListWidth") + "px",
                    position: "relative",
                    "list-style": "none"
                })
            },
            itemLoop: function () {
                var c = true,
                    b = this;
                this.dom.items.each(function () {
                    b.delegate("manipulateItem", a(this), c);
                    c = false
                })
            },
            adjacentItem: function (c) {
                var b = this;
                this.dom.items.each(function () {
                    if (a(this).hasClass("display")) {
                        b.delegate("itemTransform", a(this), c)
                    }
                })
            },
            itemTransform: function (c, b) {
                this.delegate("itemFadeOut", c);
                if (b === "next") {
                    if (c.is("li:last-child")) {
                        this.delegate("itemFadeIn", this.dom.items.first())
                    } else {
                        this.delegate("itemFadeIn", c.next())
                    }
                } else {
                    if (b === "previous") {
                        if (c.is("li:first-child")) {
                            this.delegate("itemFadeIn", this.dom.items.last())
                        } else {
                            this.delegate("itemFadeIn", c.prev())
                        }
                    }
                }
            },
            itemFadeIn: function (b) {
                b.fadeIn(this.settings.fadeInSpeed, function () {
                    b.addClass("display")
                })
            },
            itemFadeOut: function (b) {
                b.fadeOut(this.settings.fadeOutSpeed, function () {
                    b.removeClass("display")
                })
            },
            start: function () {
                var b = this;
                this.animationId = setInterval(function () {
                    b.delegate("adjacentItem", "next")
                }, this.settings.transitionSpeed)
            },
            pause: function () {
                clearInterval(this.animationId);
                this.api("pause");
                return this
            },
            resume: function () {
                this.delegate("start");
                this.api("resume");
                return this
            },
            next: function () {
                this.delegate("pause").delegate("adjacentItem", "next");
                return this
            },
            previous: function () {
                this.delegate("pause").delegate("adjacentItem", "previous");
                return this
            }
        },
        reveal: {
            init: function () {
                this.progress = this.style.progress
            },
            settings: function () {
                return {
                    letterRevealSpeed: 70,
                    transitionSpeed: 2000,
                    pauseOnHover: false
                }
            },
            progress: {
                animate: true,
                animationId: "",
                original: {},
                span: {},
                text: "",
                length: 0,
                i: 0,
                getLength: function () {
                    if (this.length === 0) {
                        this.length = this.text.length
                    }
                    return this.text.length
                },
                reset: function (b) {
                    this.span = b.span;
                    this.text = b.text;
                    this.length = 0;
                    this.i = 0
                },
                increment: function () {
                    this.span.text(this.text.slice(0, this.i));
                    this.i += 1
                },
                revealAll: function () {
                    this.span.text(this.text);
                    this.i = this.getLength()
                }
            },
            manipulateDom: function () {
                var b = this,
                    d = b.dom,
                    c = d.list;
                d.wrapper.css({
                    width: "100%"
                });
                d.title.css({
                    "float": "left",
                    overflow: "hidden"
                });
                c.css({
                    "float": "left",
                    position: "relative",
                    "list-style": "none",
                    margin: 0,
                    padding: 0
                });
                c.width(this.api("getListWidth") + "px")
            },
            pause: function () {
                this.delegate("stopAnimation");
                this.progress.revealAll();
                this.api("pause");
                return this
            },
            resume: function () {
                var b = this,
                    c = b.progress;
                c.animate = true;
                c.animationId = setTimeout(function () {
                    b.delegate("adjacentItem", "next")
                }, 50);
                b.api("resume");
                return b
            },
            adjacent: function (b) {
                this.delegate("stopAnimation");
                this.api("pause");
                this.delegate("adjacentItem", b);
                this.progress.revealAll();
                return this
            },
            previous: function () {
                return this.delegate("adjacent", "previous")
            },
            next: function () {
                return this.delegate("adjacent", "next")
            },
            stopAnimation: function () {
                clearInterval(this.progress.animationId);
                this.progress.animate = false
            },
            manipulateItem: function (c, b) {
                c.css({
                    position: "absolute",
                    left: 0,
                    top: 0
                }).wrapInner('<span class="original_text" />');
                c.children("span").css({
                    opacity: 0,
                    display: "block"
                });
                if (b) {
                    c.addClass("revealing")
                }
            },
            itemLoop: function () {
                var c = true,
                    b = this,
                    d = b.dom;
                d.items.each(function () {
                    b.delegate("manipulateItem", a(this), c);
                    c = false
                })
            },
            prepareItem: function () {
                var b = this,
                    d = b.dom.list.find(".revealing"),
                    c = b.progress;
                if (d.children(".revealing_text").length === 0) {
                    d.append('<span class="revealing_text" />').children(".revealing_text").css({
                        opacity: 1,
                        position: "absolute",
                        left: 0,
                        top: 0
                    })
                }
                c.reset({
                    span: d.children(".revealing_text"),
                    text: d.children(".original_text").text()
                });
                if (c.animate === true) {
                    b.delegate("animate")
                }
            },
            animate: function () {
                var b = this;
                b.progress.animationId = setInterval(function () {
                    b.delegate("revealLetter")
                }, b.settings.letterRevealSpeed)
            },
            revealLetter: function () {
                var b = this,
                    c = b.progress;
                c.increment();
                if (c.i === c.getLength()) {
                    clearInterval(c.animationId);
                    c.animationId = setTimeout(function () {
                        b.delegate("adjacentItem", "next")
                    }, b.settings.transitionSpeed)
                }
            },
            adjacentItem: function (b) {
                var e = this.dom,
                    d = e.list.find(".revealing").removeClass("revealing"),
                    c = this.delegate(b === "previous" ? "getPreviousItem" : "getNextItem", e, d);
                c.addClass("revealing");
                d.children(".revealing_text").text("");
                this.delegate("prepareItem")
            },
            getNextItem: function (c, b) {
                return (b.is("li:last-child")) ? c.list.find("li:first-child") : b.next()
            },
            getPreviousItem: function (c, b) {
                return (b.is("li:first-child")) ? c.list.find("li:last-child") : b.prev()
            },
            start: function () {
                if (this.settings.autoStart === true) {
                    this.delegate("prepareItem")
                }
            }
        },
        scroll: {
            init: function () {
                this.progress = this.style.progress;
                this.progress.autoScroll = this.settings.autoStart
            },
            progress: {
                autoScroll: true,
                animationId: "",
                left: 0,
                boundary: 0,
                current: {},
                last: {},
                resetLeft: function (b) {
                    this.left = parseInt(b.dom.list.css("left"))
                }
            },
            settings: function () {
                return {
                    scrollSpeed: 50,
                    slideSpeed: 1000,
                    slideEasing: "swing",
                    pauseOnHover: true
                }
            },
            manipulateDom: function (b) {
                var c = this.dom,
                    b = typeof (b) === "undefined" ? false : b;
                if (b === false) {
                    c.wrapper.css({
                        width: "10000px",
                        position: "relative"
                    });
                    c.title.css({
                        "float": "left"
                    });
                    c.list.wrap('<div class="newsticker_scroller" />').css({
                        position: "absolute",
                        left: 10
                    });
                    c.scroller = this.dom.wrapper.children(".newsticker_scroller")
                } else {
                    if (b === true) {
                        c.wrapper.css({
                            width: "100%"
                        });
                        c.scroller.css({
                            position: "absolute",
                            height: "100%",
                            overflow: "hidden",
                            width: this.api("getListWidth") + "px",
                            left: c.title.outerWidth(true) + "px"
                        })
                    }
                }
            },
            manipulateItem: function (d, b) {
                var c = d.css({
                    "float": "left"
                }).outerWidth(true);
                d.css({
                    position: "absolute",
                    display: "inline",
                    left: b + "px",
                    width: c + "px"
                });
                b += c;
                return b
            },
            itemLoop: function () {
                var c = this,
                    b = 0,
                    d = this.progress,
                    e = this.dom;
                e.items.each(function () {
                    b = c.delegate("manipulateItem", a(this), b)
                });
                d.current = e.items.first();
                d.last = e.items.last();
                d.boundary = d.current.next().position().left;
                c.delegate("manipulateDom", true)
            },
            start: function () {
                if (this.progress.autoScroll === true) {
                    this.delegate("animate")
                }
            },
            animate: function () {
                var b = this,
                    c = b.progress;
                if (c.autoScroll === false) {
                    c.autoScroll = true
                }
                c.animationId = setInterval(function () {
                    b.delegate("doAnimation")
                }, b.settings.scrollSpeed)
            },
            doAnimation: function () {
                var b = this.progress;
                if (b.left + b.boundary < 0) {
                    this.delegate("nextItem")
                }
                b.left -= 1;
                this.dom.list.css({
                    left: b.left + "px"
                })
            },
            pause: function () {
                var b = this.progress;
                b.autoScroll = false;
                clearInterval(b.animationId);
                this.api("pause");
                return this
            },
            resume: function () {
                this.delegate("animate");
                this.api("resume");
                return this
            },
            next: function () {
                var b = this,
                    c = b.progress,
                    d = b.settings,
                    e = c.boundary < 0 ? c.left - c.current.width() : "-" + c.boundary;
                b.delegate("pause");
                b.dom.list.animate({
                    left: e + "px"
                }, d.slideSpeed, d.slideEasing, function () {
                    c.resetLeft(b);
                    b.delegate("nextItem")
                })
            },
            resize: function () {
                this.dom.scroller.width(this.api("getListWidth"))
            },
            previous: function () {
                var b = this,
                    c = b.progress,
                    d = b.settings,
                    e, f;
                b.delegate("pause");
                e = b.delegate("getPrevious");
                e.css({
                    left: c.current.position().left - parseInt(e.width())
                });
                f = e.position().left < 0 ? (0 - e.position().left) : "-" + e.position().left;
                b.dom.list.animate({
                    left: f + "px"
                }, d.slideSpeed, d.slideEasing, function () {
                    c.resetLeft(b);
                    b.delegate("previousItem", e)
                })
            },
            nextItem: function () {
                var b = this.progress,
                    g = this.dom,
                    d = g.items.last(),
                    f = g.items.first(),
                    c = b.last.outerWidth(true) + b.last.position().left,
                    e = b.current;
                e.css({
                    left: c + "px"
                });
                if (e.next().length === 0) {
                    b.current = f;
                    b.last = d
                } else {
                    b.current = e.next();
                    b.last = b.current.prev()
                }
                if (b.current.next().length === 0) {
                    b.boundary = f.position().left
                } else {
                    b.boundary = b.current.next().position().left
                }
            },
            getPrevious: function () {
                var b = this.progress;
                if (b.current.prev().length === 0) {
                    return this.dom.items.last()
                }
                return b.current.prev()
            },
            previousItem: function (c) {
                var b = this.progress,
                    d = this.dom;
                b.current = c;
                if (b.current.prev().length === 0) {
                    b.last = d.items.last()
                } else {
                    b.last = b.current.prev()
                }
                if (b.current.next().length === 0) {
                    b.boundary = d.items.first().position().left
                } else {
                    b.boundary = b.current.next().position().left
                }
            }
        }
    }
})(jQuery);